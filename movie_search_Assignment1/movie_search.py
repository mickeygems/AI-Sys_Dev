# -*- coding: utf-8 -*-
"""movie_search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WThE3ATJV5iAz2ju4_BdgH3eLLRnNf0i

# Install and import libraries
"""

# (a) Install and import libraries
# !pip install sentence-transformers pandas scikit-learn

import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

"""# Load movies.csv into a pandas DataFrame"""

# (b) Load dataset
df = pd.read_csv("movies.csv")   # Ensure the file is in the same directory
df = df[['title', 'plot']].dropna().reset_index(drop=True)
df

"""# Create embeddings using all-MiniLM-L6-v2"""

# (c) Create embeddings
MODEL_NAME = "all-MiniLM-L6-v2"
model = SentenceTransformer(MODEL_NAME)

corpus_embeddings = model.encode(
    df['plot'].tolist(),
    convert_to_numpy=True,
    normalize_embeddings=True
)
corpus_embeddings.shape

"""# Implement search_movies(query, top_n)"""

# (d) Implement search_movies
def search_movies(query, top_n=5):
    """
    Return top_n most similar movies to the query based on plot similarity.
    """
    query_vec = model.encode([query], convert_to_numpy=True, normalize_embeddings=True)
    sims = cosine_similarity(query_vec, corpus_embeddings)[0]

    top_idx = sims.argsort()[::-1][:top_n]
    results = df.loc[top_idx, ['title', 'plot']].copy()
    results.insert(2, 'similarity', sims[top_idx])
    results = results.sort_values('similarity', ascending=False).reset_index(drop=True)
    return results

"""# Test with query “spy thriller in Paris”"""

# (e) Test with query
search_movies("spy thriller in Paris", top_n=3)







"""# test_movie_search :
test file code
"""

import unittest
import pandas as pd

class TestMovieSearch(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.csv_path = "movies.csv"
        # load_data, build_index, search_movies, and build_model are defined in the notebook
        # Access the globally defined functions and variables
        cls.df = pd.read_csv(cls.csv_path) # Use globally available pd and assume movies.csv exists
        cls.df = cls.df[['title', 'plot']].dropna().reset_index(drop=True)
        cls.model = SentenceTransformer("all-MiniLM-L6-v2") # Use globally available SentenceTransformer
        cls.embeddings = cls.model.encode(
            cls.df['plot'].tolist(),
            convert_to_numpy=True,
            normalize_embeddings=True
        )
        # The original test class structure assumed an 'index' was built, but the current search_movies
        # function uses the global 'embeddings'. We will adapt the tests to call the global search_movies
        # cls.index = build_index(cls.df, model=cls.model)

    def test_output_format(self):
        # Use the globally available search_movies function
        res = search_movies("spy thriller in Paris", top_n=3)
        self.assertIsInstance(res, pd.DataFrame)
        self.assertListEqual(list(res.columns), ["title", "plot", "similarity"])

    def test_top_n(self):
        # Use the globally available search_movies function
        res = search_movies("spy thriller in Paris", top_n=2)
        self.assertEqual(len(res), 2)

    def test_sorted_similarity(self):
        # globally available search_movies function
        res = search_movies("spy thriller in Paris", top_n=5)
        sims = res["similarity"].tolist()
        self.assertEqual(sims, sorted(sims, reverse=True))

    def test_relevance_contains_paris_spy(self):
        # globally available search_movies function
        res = search_movies("spy thriller in Paris", top_n=3)
        # Expect at least one Paris/spy-themed title near top for sample CSV
        top_titles = " ".join(res["title"].head(3).tolist()).lower()
        # This test relies on the content of movies.csv and the model's performance.
        # For the sample data provided in the notebook, the first movie is "Spy Movie" with a plot
        # containing "spy" and "Paris", so this test should pass.
        self.assertTrue(any(k in top_titles for k in ["spy movie", "romance in paris", "action flick"])) # Adjust based on expected relevant titles


if __name__ == "__main__":
    # Use TextTestRunner for better compatibility in Colab
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestMovieSearch))
    runner = unittest.TextTestRunner()
    runner.run(suite)