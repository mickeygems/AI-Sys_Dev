# -*- coding: utf-8 -*-
"""test_movie_search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4jxojg3WmllHUAKjSteJqLWH_Z3KCDV

Define Core Functions
"""

import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

def load_data(csv_path: str) -> pd.DataFrame:
    """Load the movies CSV into a DataFrame with required columns."""
    df = pd.read_csv(csv_path)
    if not {"title", "plot"}.issubset(df.columns):
        raise ValueError("CSV must contain 'title' and 'plot' columns")
    df = df[['title', 'plot']].dropna().reset_index(drop=True)
    return df

def build_model(model_name: str = "all-MiniLM-L6-v2"):
    """Load the SentenceTransformer model."""
    return SentenceTransformer(model_name)

def build_index(df: pd.DataFrame, model):
    """Build embeddings for the dataset."""
    embeddings = model.encode(
        df['plot'].tolist(),
        convert_to_numpy=True,
        normalize_embeddings=True
    )
    return {"df": df, "embeddings": embeddings, "model": model}

def search_movies(query: str, top_n: int = 5):
    """Return top_n most similar movies to the query based on plot similarity."""
    query_vec = index["model"].encode([query], convert_to_numpy=True, normalize_embeddings=True)
    sims = cosine_similarity(query_vec, index["embeddings"])[0]

    top_idx = sims.argsort()[::-1][:top_n]
    result = index["df"].loc[top_idx, ["title", "plot"]].copy()
    result.insert(2, "similarity", sims[top_idx])
    result = result.sort_values("similarity", ascending=False).reset_index(drop=True)
    return result

"""Building Data and Index Once"""

# Load dataset and build index globally
csv_path = "movies.csv"
df = load_data(csv_path)
model = build_model()
index = build_index(df, model)


search_movies("spy thriller in Paris", top_n=3)

"""# Unit Tests code testing"""

import unittest

class TestMovieSearch(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # use globally defined df, model, index
        cls.df = df
        cls.model = model

    def test_output_format(self):
        res = search_movies("spy thriller in Paris", top_n=3)
        self.assertIsInstance(res, pd.DataFrame)
        self.assertListEqual(list(res.columns), ["title", "plot", "similarity"])

    def test_top_n(self):
        res = search_movies("spy thriller in Paris", top_n=2)
        self.assertEqual(len(res), 2)

    def test_sorted_similarity(self):
        res = search_movies("spy thriller in Paris", top_n=5)
        sims = res["similarity"].tolist()
        self.assertEqual(sims, sorted(sims, reverse=True))

    def test_relevance_contains_paris_spy(self):
        res = search_movies("spy thriller in Paris", top_n=3)
        top_titles = " ".join(res["title"].head(3).tolist()).lower()
        self.assertTrue(any(k in top_titles for k in ["spy movie", "romance in paris", "action flick"]))

if __name__ == "__main__":
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestMovieSearch))
    runner = unittest.TextTestRunner()
    runner.run(suite)